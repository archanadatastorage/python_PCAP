

python
Anaconda 

 file.py
set PYTHON_HOME=path

which python = 


--------------------


Python

- Programming language 
- interpreter
- scripting language
- open souce
- general purpose  
- simple 
- less code
- object 
- version 3.12
- varible   : object
- Datatypes
- dynamically typed
   a=10
- python shell / Read Evaulate Print Loop 
Programming paradigm

- Procedural programming :  Procedure/ function
  named block
  reusability
   C, basic, python


  def add(a,b):
	c= a+b
	return c

add(2,3)

- Object Oriented Programming : Things/entity : java, .Net, python
  {data + methods} = class / object

class cust:
	x
	def add(a,b):
		x= a+b
		return x


object.add(2,3)

  Garbage Collection

- Functional Programming : Python

	* Pure object 







----------------- 
block/scope
if()
 {


}
else
{

}

begining of scope
:

if1 conditions :
	stm1
	stm2
	stm3
	if2 conditions :
		sm1
		sm2
		sm3
	else :
		elsm1
		elsm2
else :
	el1
	el2




operand1 opearation operand2
 3+2.0
 3.0 +2.0  = 5.0		//implicit casting
3+2  = 5			/ explicit casting

# : single line comment
`multiple line comments

`

def show() :
	print("hello") 
	


-----------------------
Day2
-----------------------


Python


- download python: shell/ 
- IDE :
	*) anaconda 
		jupyter
		pycharm
	*) pycharm

- anaconda cloud
- colab : jupyter notebook  : gmail/google drive
- jupyter cloud


---- varible


- atoz, A to Z, 0-9
- num1, num_1
- 1num  // invalid
- _num	: protected
- __num : private
- implicitly defined


std datatypes


- immutable : value cannot be changed
Number
	int
		unsinged int
		signed int
	float
	complex
	hex
String
	''
	""
name ="This is India"
[0]
[0:2]
slicing
[start:end:incr]
[ start:]
[:end]
membership
in
not in 

formatted string

print("my name is %i ",a)

%s	- string
%i	- integer
%d	- octal
%x	- hexadecimal
%c	- character
%f /%g	- float
%e	- exponential

Tuple
	- collection of hetrogenous values
	- ()
	- repeat


- mutable : value can change
List
	- collection of hetrogenous values
	- [] 
	- repeat
Dictionary
Sets

---------------------
Day3
----------------------
number

   binary - base 2   0b		- bin()
   octal - base 8    0o70	- oct()
   hexadecimal - base 16   0xa  - hex()

  decimal  - base 10


for i in [1,56,7,19]:
	print(i)

l1


----------
list/tuple : hetrogenous, indexed ( 0....n-1)
		ordered
	[,,]
	(,,)
Dictionary : hetrogenous , custom_indexed /key
		{k:v,k1:v2}
		ordered

Set
	: indexed
	: unique elements
	: ordered
	:{}




-----------

List comprehension

- generate a new list


newlist =[ exp for val in collection]

newlist =[ exp for val in collection if<exp>]
newlist =[ exp for val in collection if <exp2> and <exp2>]
newlist =[ exp for val in collection1 for val in collection1 ]

------day4---------------


PVM

list comrehension

newname=[exp for i in (ramge)]
newname=[exp for i in (ramge) if]
newname=[exp for i in (ramge) for j in l2]


python file
- name 
- .py
- code


Execute
-

var = input("msg")


function 
- optional argu
- 1 return
call function

fun()
built-in : shipped with python

UDF : user defined function

def namefun(parameters):
	body

*argv		- tuple :()
**kwargs	- dictionary {}

addition +
subtraction -
multiplication *
modulus %
exponent **
floor divivion //
division /

conditional op
<
>
<=
>=
==
!=

logical operator

condition1  and con2
or
not

if cons :
	body

for
while

bitwise

val1 & val2

2 & 3

10 & 11

10
11

10


val1 | val2
2 | 3
10
11

11

XOR  ^

2^3
10
11

01

NOT ~
 ~2

10


right shift
>>
leftshift
<<

2 >> 3
00010
2<<3
10000


x =0

while x<10:
	if x%2 ==0 :
		continue
	print(x)	
	x = x+1	

---------------------------

Day5
----------------------



*argv - tuple()
**kwargs - dict

def add(x,y):
	return x+y

add(2,3)
print(x)
------------------------------

c=0
for i in range(1,5):
	c =c +1

print(i)

------------

create .py file 
executed  : python filename.py [command-line argu]

modules  : lib 
python program file... name.py

collection of varibles,functions,classes

import modulesname
from modulename import class,class1
import modulesname as alias

download the modules

pip install module

sys

*argv - tuple()
**kwargs - dict
sys.argv - list  : command-line


python cmdarg.py 'hi india'

"'hi" "india'"

----------------------------

others = -1
for i in range(1,3):
    for j in range(1,2):
        if i==j:
            others +=1
    else:
        others +=1
print(others)

i j	others
1 1	0
1 2	1
2 1	
2 2	2
--------------------------
Exception and Error


Exception :
  exception handling
Error 

TypeError : exception raise when datatype mismatch
NameError : varible,function,class, object is missing
SyntaxError : wrong syntax
IndexError : list,tuple-- index out of range
KeyError : dictionary -- invalid key

ValueError: casting
IOError : file i/o
AtrributeError : class/object
ImportError
ZeroDivisionError


------------------
Exception Handling

try :

 exceptions
except:
	handling


----------------------

= input("msg")
(, c,input,)

import sys

pip install 

module

__name__
a = a+100

Functional programming
	- pure object oriented
	- data immutability
	- pure function

def add(a,b):
	c =a+b
	return c

	- First class value : functions are object/value
	- higher order function/value  : pass function as arguments
	- what to do rather how to do

l1 = [2,8,45]
l2= []
for i in l1:
	l2.insert(i+100)

	- map : 1 element -> op -> 1 element
	- anaoymous function / lambda expression

lambda a,b: a+b
	
---------------------
object Oriented program

{attributes + methods}

**encapsulation : create class

- instance varible/attributes		: self
- regular methods			: self
- constructor  : __init__		: self
- class attributes			
- class methods 			: cls
- static method 			: 
- Access specifier
	public			: default	:
	protected		: class/subclass	: _
	private			: class			:__
	
** multiple classes
inheritance = Is-A relationship
composition = Has-A relationship

1) Inheritance :
  -reusability
  - Parent class/ super class
  - child class / sub class

	Types

	- Single inheritance 
		1 child class : 1 Parent class

	- Multiple inheritance 
		1 child class : Multiple Parent class

2) Composition

	coordiantes : x,y
	time  
	clas date:
		day,month,year

	emp:
		name String
		sal float
		ph string
		bday date

trianle
	Point1 : cood
	Point2



**Abstract  : an incomplete class

  no abstract class in python
can not instantiate
module abc

--------------------


Encapsulation

multiple classes/ Association

- inheritance : is -A
 * Single : 1
 * Multiple : multiple in

  Diamond
 ** Abstract class
   module abc .... ABC, @abstactmethod

- Composition : has-a
	
-----------------------------
encapsulation
	class
	inner class
multiple classess
- inheritance :  is-a
  single
  multiple
- Composition : Has-a
   inner class
- abstract
-polymorphism
	overriding : parent-child : same name and same signature method 
	overloading : same class : different signature of the same name method
-name-mangling


-----

Magic method / Dunder (Double underscore)

__init__	: constructor
__name__
__del__		: destructor
__str__
__repr__	: logging
__add__	


India
1,2,3
k:1,k2:3

len


Point  : x,y

line(p1,p2)


--------------------

Decorator

procedural : function/procedure
object oriented programming : class -> object
Functinal programming:
	pure object
	data immutability
	pure function
	first order value : treat function as an object
	higher order function : 
		- another function as parameter
		- return another function
 
	map(),filter,reduce
	lambda expression
	closure

Namespace : directory of varibles of a fun/class
	 : 

def calculate(val1,val2,val3):
    c=val1(val2,val3)
    return c

calculate(2,34,5)

Nested Function :
	create function winthin a function

	
Decorator : modify a function


original function -> new function			
			use the original function
			+ ur code

function as object
nested function
pass function as parameter
return fun 
alias for fun

@

Multiple decorators for single function


---------------

r
rb
r+
a
w

Decorator : modify a function

function
class
	- built-in
		@classmethod
		@staticmethod
		@property : create a attribute
			.getter			default
			.setter
			.deleter 
	- custom 


Callable
  object that is callable
  function
  callable()
	True : if an object is callable
	False : if not
__call__()

add(2,3)

add.__call__(2,3)
------------------------------

module search path

import classDecorator

- current directory
- PYTHONPATH
- standard modules
- site-package/lib

sys.path


sys.argv
os

------------------------------------------------------------------------

__call__()

import sys
sys.path
sys.path.append()


os
random : random number generation

datetime : date,time,combination

json

_id
- schema
   {"field":value,"field2":value2...}
int, boolean, array,object, string,null
- semi strcutured/ flexible
 {"age":34,"name":"Ram"},
 {"name":"sia"}
 {"name":"rawan","occupasion":"king"}
- humanread
- 
import json
1. python => json	- write
str
dumps() - doesn't create a file
dump() - create a file


2. JSON => python	- read
loads()
load()


------------------------

module : .py file
Packages

- folder
	- modules


Project
	- package
		- __init__.py		from 3 this is optional
		- module.py
		- subpkg
			-__init__.py
			- modulesub.py



- root dir / current dir

- relative path
- importing package from parent 


MyProject
	-main.py
	- my_package
		- __init__.py
		- String-op.py
		-subpkg1
			- __init__.py
			- maths_op.py
			-another-subpkg
				-__init__.py
				- adv-math.py
				-stats.py
		-subpkg2
			-__init__.py
			-utils.py
			-helper.py


Root dir : Project
Parent dir - 1 dir above
	adv-math.py  : subpkg1
	help.py :my_package

relative path

-------------------
- __ini__.py -> varible access


septemberProject			-> root
main.py
	Mypackage
		- __init__.py
		- string-op.py
		- subpkg1
			-__init__.py
			- math-op.py
			- subsubpkg
				- __init__.py
				- adv-math.py
				- stats.py
		-subpkg2
			-__init__.py
			-utils.py
			- helper.py

__init__.py : when pck is loaded in memory
import Mypackage
import Mypackage.subpkg1
 reaload()

root		
current dir 
parent dir 

;
:
package path
sys.path.append("")


----------------------

import mypackage   : no subpkg/module

Parent dir import

- same pkg
- you should run your python script from the pkg where the parent dir or above  


.		current dir
.. 		one dir above
...		two dir above
....		three dir above

--------------------
Using the __name__ variable in a logger allows you to quickly identify the source of log messages.

By default, log messages are emitted to the console. 

To configure the logging system to emit log messages to other destinations, you need to create a handler and attach it to the logger. 

---------------------


logging 


--------------------------------

Generator


Iteration : process
Iterable : conatiner  : __iter__()
Iterator : __iter__(),__next__()

l1 =['tea','pen','pencils','eraser']

i_num = l1.__iter__()

l1 - iterable		: __iter__()
i_num - iterator	: __iter__(),__next__()

inum2 = i_num.__iter__()
type(inum2)


Power of Two

16 : 1,2,4,8,16

32 : 1,2,4,8,16,32
--------------------------------------------


Array
Series
DataFrame



Array

import numpy as np

- homegenous
- better memory management

-----------------



Pythontic 

a=10;

l1 = [1,2,4,5,6]
l2 =[]
for i in l1;
	l2.append(i+100)

l2 = [x+100 for x in l1]


name mangling


---------------

DataFrame

tabular rep of data


table
	columns
	row
	data

- hetrogenous elements


-------------------------------
  l1 = [1,2,3,4]
l2=[]
for i in l1:
	l2.append[i]

l2 = [i for i in l1]

---------------

 pythonics  -  


-----------
numpy
  pandas 

 Series
 - hetrogenous
 - single index
 - immutable index
 DataFrames 
 - hetrogenous
  - row index   axis=0
- column index  axis=1
 - immutable index

np.nan  : null/ missing value

isNull()
isNotNull()


dropna()
fillna()

inplace = True

drop
sum
mean
idxmax
max
describe


duplicate

-------------------------------

Custom Exception

Context Manager

Pytest

python debugging using jupyter notebook

Custom Exception

try 

except

else

finally


raise : expliciltly raise an exception

Custom Exception

class myexp(Exception):

---------


File handling


f=open("filename","mode")
read/write
f.close()



Context Manager


with


custom context manager

1. using class
class name:

	def __init__()

	def __enter__()

	def __exit__()

2. using function
	possible decorator

--------------------------

pytest Selinium

pip install pytest

- name of test file must starts with test_ or ends with _test
- name of the test function must start start test_
- pytest : tests all the test_ files from the pkg
- -v : verbose
- -s : print the print log
- -k : function name exp
- -m : custom marker

Marker 


fixture

setup () : called 1 at the beginning
close() : called 1 at the end


















































		












	
































































































	






















python
Anaconda 

 file.py
set PYTHON_HOME=path

which python = 


--------------------


Python

- Programming language 
- interpreter
- scripting language
- open souce
- general purpose  
- simple 
- less code
- object 
- version 3.12
- varible   : object
- Datatypes
- dynamically typed
   a=10
- python shell / Read Evaulate Print Loop 
Programming paradigm

- Procedural programming :  Procedure/ function
  named block
  reusability
   C, basic, python


  def add(a,b):
	c= a+b
	return c

add(2,3)

- Object Oriented Programming : Things/entity : java, .Net, python
  {data + methods} = class / object

class cust:
	x
	def add(a,b):
		x= a+b
		return x


object.add(2,3)

  Garbage Collection

- Functional Programming : Python

	* Pure object 







----------------- 
block/scope
if()
 {


}
else
{

}

begining of scope
:

if1 conditions :
	stm1
	stm2
	stm3
	if2 conditions :
		sm1
		sm2
		sm3
	else :
		elsm1
		elsm2
else :
	el1
	el2




operand1 opearation operand2
 3+2.0
 3.0 +2.0  = 5.0		//implicit casting
3+2  = 5			/ explicit casting

# : single line comment
`multiple line comments

`

def show() :
	print("hello") 
	


-----------------------
Day2
-----------------------


Python


- download python: shell/ 
- IDE :
	*) anaconda 
		jupyter
		pycharm
	*) pycharm

- anaconda cloud
- colab : jupyter notebook  : gmail/google drive
- jupyter cloud


---- varible


- atoz, A to Z, 0-9
- num1, num_1
- 1num  // invalid
- _num	: protected
- __num : private
- implicitly defined


std datatypes


- immutable : value cannot be changed
Number
	int
		unsinged int
		signed int
	float
	complex
	hex
String
	''
	""
name ="This is India"
[0]
[0:2]
slicing
[start:end:incr]
[ start:]
[:end]
membership
in
not in 

formatted string

print("my name is %i ",a)

%s	- string
%i	- integer
%d	- octal
%x	- hexadecimal
%c	- character
%f /%g	- float
%e	- exponential

Tuple
	- collection of hetrogenous values
	- ()
	- repeat


- mutable : value can change
List
	- collection of hetrogenous values
	- [] 
	- repeat
Dictionary
Sets

---------------------
Day3
----------------------
number

   binary - base 2   0b		- bin()
   octal - base 8    0o70	- oct()
   hexadecimal - base 16   0xa  - hex()

  decimal  - base 10


for i in [1,56,7,19]:
	print(i)

l1


----------
list/tuple : hetrogenous, indexed ( 0....n-1)
		ordered
	[,,]
	(,,)
Dictionary : hetrogenous , custom_indexed /key
		{k:v,k1:v2}
		ordered

Set
	: indexed
	: unique elements
	: ordered
	:{}




-----------

List comprehension

- generate a new list


newlist =[ exp for val in collection]

newlist =[ exp for val in collection if<exp>]
newlist =[ exp for val in collection if <exp2> and <exp2>]
newlist =[ exp for val in collection1 for val in collection1 ]

------day4---------------


PVM

list comrehension

newname=[exp for i in (ramge)]
newname=[exp for i in (ramge) if]
newname=[exp for i in (ramge) for j in l2]


python file
- name 
- .py
- code


Execute
-

var = input("msg")


function 
- optional argu
- 1 return
call function

fun()
built-in : shipped with python

UDF : user defined function

def namefun(parameters):
	body

*argv		- tuple :()
**kwargs	- dictionary {}

addition +
subtraction -
multiplication *
modulus %
exponent **
floor divivion //
division /

conditional op
<
>
<=
>=
==
!=

logical operator

condition1  and con2
or
not

if cons :
	body

for
while

bitwise

val1 & val2

2 & 3

10 & 11

10
11

10


val1 | val2
2 | 3
10
11

11

XOR  ^

2^3
10
11

01

NOT ~
 ~2

10


right shift
>>
leftshift
<<

2 >> 3
00010
2<<3
10000


x =0

while x<10:
	if x%2 ==0 :
		continue
	print(x)	
	x = x+1	








































































	



















